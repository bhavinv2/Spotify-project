import spotipy
from spotipy.oauth2 import SpotifyOAuth
import time
from flask import Flask, request, url_for, session, redirect
from requests import get, post
import json
import os
import base64
from dotenv import load_dotenv

app = Flask(__name__)

app.config['SESSION_COOKIE_NAME'] = 'Spotify Cookie'
app.secret_key = 'jbjvg7$shbsbsududbjs'
TOKEN_INFO = 'token_info'

load_dotenv()

client_id = os.getenv("CLIENT_ID")
client_secret = os.getenv("CLIENT_SECRET")


def create_spotify_oauth():
    return SpotifyOAuth(
        client_id=client_id,
        client_secret=client_secret,
        redirect_uri=url_for('redirect_page', _external=True),
        scope='user-library-read playlist-modify-public playlist-modify-private user-top-read'
    )


@app.route('/')
def login():
    auth_url = create_spotify_oauth().get_authorize_url()
    return redirect(auth_url)


@app.route('/redirect')
def redirect_page():
    session.clear()
    code = request.args.get('code')
    token_info = create_spotify_oauth().get_access_token(code)
    session[TOKEN_INFO] = token_info
    return redirect(url_for('home', _external=True))


@app.route('/home')
def home():
    try:
        token_info = get_token()
    except:
        print("User not logged in")
        return redirect('/')

    token = token_info['access_token']
    # Display user's top tracks
    user_top_tracks = get_user_top_tracks(token)
    if user_top_tracks is not None:
        print("User's Top Tracks:")
        for idx, track in enumerate(user_top_tracks):
            print(f"{idx + 1}. {track['name']} by {track['artists'][0]['name']}")
    else:
        print("Failed to retrieve user's top tracks")

    # Run the main menu in the terminal
    main_menu(token)

    return "OAuth successful. Check terminal for output."


def get_token():
    token_info = session.get(TOKEN_INFO, None)
    if not token_info:
        return redirect(url_for('login', _external=False))

    now = int(time.time())
    is_expired = token_info['expires_at'] - now < 60
    if is_expired:
        spotify_oauth = create_spotify_oauth()
        token_info = spotify_oauth.refresh_access_token(token_info['refresh_token'])
        session[TOKEN_INFO] = token_info

    return token_info


def get_auth_header(token):
    return {"Authorization": "Bearer " + token}


def search_for_artist(token, artist_name):
    url = "https://api.spotify.com/v1/search"
    headers = get_auth_header(token)
    query = f"?q={artist_name}&type=artist&limit=1"

    query_url = url + query
    result = get(query_url, headers=headers)
    json_result = json.loads(result.content).get("artists", {}).get("items", [])
    if len(json_result) == 0:
        print("No artist with this name exists...")
        return None

    return json_result[0]


def get_songs_by_artist(token, artist_id):
    url = f"https://api.spotify.com/v1/artists/{artist_id}/top-tracks?country=US"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    json_result = json.loads(result.content).get("tracks", [])
    return json_result


def get_user_top_tracks(token):
    url = "https://api.spotify.com/v1/me/top/tracks"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    if result.status_code == 200:
        json_result = json.loads(result.content).get("items", [])
        return json_result
    else:
        print(f"Failed to get top tracks: {result.status_code}")
        print(result.content)
        return None


def get_saved_tracks(token):
    url = "https://api.spotify.com/v1/me/tracks"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    if result.status_code == 200:
        json_result = json.loads(result.content).get("items", [])
        return json_result
    else:
        print(f"Failed to get saved tracks: {result.status_code}")
        print(result.content)
        return None


def view_top_songs(token):
    artist_name = input("Enter the artist name: ")
    result = search_for_artist(token, artist_name)
    if result:
        artist_id = result["id"]
        songs = get_songs_by_artist(token, artist_id)
        print(f"\nTop 10 songs by {artist_name}:\n")
        for idx, song in enumerate(songs):
            print(f"{idx + 1}. {song['name']}")
    else:
        print(f"No information found for artist: {artist_name}")


def view_saved_tracks(token):
    saved_tracks = get_saved_tracks(token)
    if saved_tracks:
        print("\nYour Saved Tracks:\n")
        for idx, item in enumerate(saved_tracks):
            track = item['track']
            print(f"{idx + 1}. {track['name']} by {track['artists'][0]['name']}")
    else:
        print("No saved tracks found.")


def main_menu(token):
    while True:
        print("\nMenu:")
        print("1. View top songs by artist")
        print("2. View saved tracks")
        print("3. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            view_top_songs(token)
        elif choice == "2":
            view_saved_tracks(token)
        elif choice == "3":
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please try again.")


def main():
    app.run(debug=True)


if __name__ == '__main__':
    main()
