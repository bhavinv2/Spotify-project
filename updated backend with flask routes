import spotipy
from spotipy.oauth2 import SpotifyOAuth
import time
from flask import Flask, request, url_for, session, redirect, jsonify
from requests import get, post
import json
import os
import csv
from dotenv import load_dotenv
import threading
from collections import Counter

app = Flask(__name__)

app.config['SESSION_COOKIE_NAME'] = 'SpotifySession'
app.secret_key = 'your_secret_key_here'  # Replace with a secure secret key
TOKEN_INFO = 'token_info'

load_dotenv()

client_id = os.getenv("CLIENT_ID")
client_secret = os.getenv("CLIENT_SECRET")

def create_spotify_oauth():
    return SpotifyOAuth(
        client_id=client_id,
        client_secret=client_secret,
        redirect_uri=url_for('redirect_page', _external=True),
        scope='user-library-read playlist-modify-public playlist-modify-private user-top-read user-follow-read playlist-read-private'
    )

@app.route('/')
def login():
    auth_url = create_spotify_oauth().get_authorize_url()
    return redirect(auth_url)

@app.route('/redirect')
def redirect_page():
    code = request.args.get('code')
    token_info = create_spotify_oauth().get_access_token(code)
    session[TOKEN_INFO] = token_info

    token = token_info['access_token']
    headers = get_auth_header(token)
    user_profile_response = get("https://api.spotify.com/v1/me", headers=headers)
    user_profile = json.loads(user_profile_response.content)
    session['user_id'] = user_profile['id']

    # Store user ID in CSV
    store_user_id_csv(user_profile['id'])

    return redirect(url_for('home', _external=True))

@app.route('/home')
def home():
    try:
        token_info = get_token()
    except:
        return redirect('/')

    token = token_info['access_token']
    threading.Thread(target=main_menu, args=(token,)).start()
    return "✅✅✅✅OAuth successful. Check terminal for menu."

@app.route('/top-songs')
def top_songs():
    token = get_token()['access_token']
    return jsonify(get_user_top_tracks(token))

@app.route('/saved-tracks')
def saved_tracks():
    token = get_token()['access_token']
    return jsonify(get_saved_tracks(token))

@app.route('/followed-artists')
def followed_artists():
    token = get_token()['access_token']
    return jsonify(get_followed_artists(token))

@app.route('/user-playlists')
def user_playlists():
    token = get_token()['access_token']
    return jsonify(get_user_playlists(token))

@app.route('/playlist-tracks/<playlist_id>')
def playlist_tracks(playlist_id):
    token = get_token()['access_token']
    return jsonify(get_playlist_tracks(token, playlist_id))

@app.route('/top-artists')
def top_artists():
    token = get_token()['access_token']
    return jsonify(get_user_top_artists(token))

@app.route('/top-genres')
def top_genres():
    token = get_token()['access_token']
    return jsonify(get_top_genres(token))

@app.route('/recommendations')
def recommendations():
    token = get_token()['access_token']
    top_tracks = get_user_top_tracks(token)
    top_artists = get_user_top_artists(token)

    seed_tracks = [track['id'] for track in top_tracks[:5]] if top_tracks else []
    seed_artists = [artist['id'] for artist in top_artists[:5]] if top_artists else []

    return jsonify(get_recommendations(token, seed_artists=seed_artists, seed_tracks=seed_tracks))

@app.route('/add-to-playlist', methods=['POST'])
def add_to_playlist():
    data = request.json
    token = get_token()['access_token']
    add_song_to_playlist(token, data['playlist_id'], data['track_uri'])
    return jsonify({"message": "Track added to playlist."})

def get_token():
    token_info = session.get(TOKEN_INFO, None)
    if not token_info:
        return redirect(url_for('login', _external=False))

    now = int(time.time())
    is_expired = token_info['expires_at'] - now < 60
    if is_expired:
        spotify_oauth = create_spotify_oauth()
        token_info = spotify_oauth.refresh_access_token(token_info['refresh_token'])
        session[TOKEN_INFO] = token_info

    return token_info

def get_auth_header(token):
    return {"Authorization": "Bearer " + token}

def store_user_id_csv(user_id):
    file_exists = os.path.isfile('user_ids.csv')
    with open('user_ids.csv', mode='a', newline='') as file:
        writer = csv.writer(file)
        if not file_exists:
            writer.writerow(['User ID'])
        writer.writerow([user_id])

def search_for_artist(token, artist_name):
    url = "https://api.spotify.com/v1/search"
    headers = get_auth_header(token)
    query = f"?q={artist_name}&type=artist&limit=1"

    query_url = url + query
    result = get(query_url, headers=headers)
    json_result = json.loads(result.content).get("artists", {}).get("items", [])
    if len(json_result) == 0:
        return None

    return json_result[0]

def get_songs_by_artist(token, artist_id):
    url = f"https://api.spotify.com/v1/artists/{artist_id}/top-tracks?country=US"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    json_result = json.loads(result.content).get("tracks", [])
    return json_result

def get_user_top_tracks(token):
    url = "https://api.spotify.com/v1/me/top/tracks"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    if result.status_code == 200:
        json_result = json.loads(result.content).get("items", [])
        return json_result
    else:
        return None

def get_saved_tracks(token):
    url = "https://api.spotify.com/v1/me/tracks"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    if result.status_code == 200:
        json_result = json.loads(result.content).get("items", [])
        return json_result
    else:
        return None

def get_followed_artists(token):
    url = "https://api.spotify.com/v1/me/following?type=artist"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    if result.status_code == 200:
        json_result = json.loads(result.content).get("artists", {}).get("items", [])
        return json_result
    else:
        return None

def get_user_playlists(token):
    url = "https://api.spotify.com/v1/me/playlists"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    if result.status_code == 200:
        json_result = json.loads(result.content).get("items", [])
        return json_result
    else:
        return None

def get_playlist_tracks(token, playlist_id):
    url = f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    if result.status_code == 200:
        json_result = json.loads(result.content).get("items", [])
        return json_result
    else:
        return None

def get_user_top_artists(token):
    url = "https://api.spotify.com/v1/me/top/artists?limit=10"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    if result.status_code == 200:
        json_result = json.loads(result.content).get("items", [])
        return json_result
    else:
        return None

def add_song_to_playlist(token, playlist_id, track_uri):
    url = f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks"
    headers = get_auth_header(token)
    headers["Content-Type"] = "application/json"
    data = json.dumps({"uris": [track_uri]})

    result = post(url, headers=headers, data=data)

    if result.status_code == 201:
        print(f"Successfully added track to playlist {playlist_id}.")
    else:
        print(f"Failed to add track to playlist: {result.status_code}")
        print(result.content)

def get_top_genres(token):
    top_artists = get_user_top_artists(token)
    if top_artists:
        genres = []
        for artist in top_artists:
            genres.extend(artist.get('genres', []))
        genre_counts = Counter(genres)
        top_genres = genre_counts.most_common(5)
        return top_genres
    else:
        return None

def get_recommendations(token, seed_artists=None, seed_genres=None, seed_tracks=None):
    url = "https://api.spotify.com/v1/recommendations"
    headers = get_auth_header(token)

    params = {
        "limit": 10,
        "seed_artists": ','.join(seed_artists) if seed_artists else None,
        "seed_genres": ','.join(seed_genres) if seed_genres else None,
        "seed_tracks": ','.join(seed_tracks) if seed_tracks else None,
    }

    result = get(url, headers=headers, params=params)
    if result.status_code == 200:
        json_result = json.loads(result.content).get("tracks", [])
        return json_result
    else:
        return None

if __name__ == '__main__':
    app.run(debug=True)
